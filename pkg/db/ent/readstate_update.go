// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notification/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/notification/pkg/db/ent/readstate"
	"github.com/google/uuid"
)

// ReadStateUpdate is the builder for updating ReadState entities.
type ReadStateUpdate struct {
	config
	hooks    []Hook
	mutation *ReadStateMutation
}

// Where appends a list predicates to the ReadStateUpdate builder.
func (rsu *ReadStateUpdate) Where(ps ...predicate.ReadState) *ReadStateUpdate {
	rsu.mutation.Where(ps...)
	return rsu
}

// SetAppID sets the "app_id" field.
func (rsu *ReadStateUpdate) SetAppID(u uuid.UUID) *ReadStateUpdate {
	rsu.mutation.SetAppID(u)
	return rsu
}

// SetUserID sets the "user_id" field.
func (rsu *ReadStateUpdate) SetUserID(u uuid.UUID) *ReadStateUpdate {
	rsu.mutation.SetUserID(u)
	return rsu
}

// SetAlreadyRead sets the "already_read" field.
func (rsu *ReadStateUpdate) SetAlreadyRead(b bool) *ReadStateUpdate {
	rsu.mutation.SetAlreadyRead(b)
	return rsu
}

// SetCreateAt sets the "create_at" field.
func (rsu *ReadStateUpdate) SetCreateAt(u uint32) *ReadStateUpdate {
	rsu.mutation.ResetCreateAt()
	rsu.mutation.SetCreateAt(u)
	return rsu
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (rsu *ReadStateUpdate) SetNillableCreateAt(u *uint32) *ReadStateUpdate {
	if u != nil {
		rsu.SetCreateAt(*u)
	}
	return rsu
}

// AddCreateAt adds u to the "create_at" field.
func (rsu *ReadStateUpdate) AddCreateAt(u uint32) *ReadStateUpdate {
	rsu.mutation.AddCreateAt(u)
	return rsu
}

// SetUpdateAt sets the "update_at" field.
func (rsu *ReadStateUpdate) SetUpdateAt(u uint32) *ReadStateUpdate {
	rsu.mutation.ResetUpdateAt()
	rsu.mutation.SetUpdateAt(u)
	return rsu
}

// AddUpdateAt adds u to the "update_at" field.
func (rsu *ReadStateUpdate) AddUpdateAt(u uint32) *ReadStateUpdate {
	rsu.mutation.AddUpdateAt(u)
	return rsu
}

// SetDeleteAt sets the "delete_at" field.
func (rsu *ReadStateUpdate) SetDeleteAt(u uint32) *ReadStateUpdate {
	rsu.mutation.ResetDeleteAt()
	rsu.mutation.SetDeleteAt(u)
	return rsu
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (rsu *ReadStateUpdate) SetNillableDeleteAt(u *uint32) *ReadStateUpdate {
	if u != nil {
		rsu.SetDeleteAt(*u)
	}
	return rsu
}

// AddDeleteAt adds u to the "delete_at" field.
func (rsu *ReadStateUpdate) AddDeleteAt(u uint32) *ReadStateUpdate {
	rsu.mutation.AddDeleteAt(u)
	return rsu
}

// Mutation returns the ReadStateMutation object of the builder.
func (rsu *ReadStateUpdate) Mutation() *ReadStateMutation {
	return rsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rsu *ReadStateUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rsu.defaults()
	if len(rsu.hooks) == 0 {
		affected, err = rsu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReadStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rsu.mutation = mutation
			affected, err = rsu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rsu.hooks) - 1; i >= 0; i-- {
			if rsu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rsu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsu *ReadStateUpdate) SaveX(ctx context.Context) int {
	affected, err := rsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rsu *ReadStateUpdate) Exec(ctx context.Context) error {
	_, err := rsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsu *ReadStateUpdate) ExecX(ctx context.Context) {
	if err := rsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsu *ReadStateUpdate) defaults() {
	if _, ok := rsu.mutation.UpdateAt(); !ok {
		v := readstate.UpdateDefaultUpdateAt()
		rsu.mutation.SetUpdateAt(v)
	}
}

func (rsu *ReadStateUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   readstate.Table,
			Columns: readstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: readstate.FieldID,
			},
		},
	}
	if ps := rsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readstate.FieldAppID,
		})
	}
	if value, ok := rsu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readstate.FieldUserID,
		})
	}
	if value, ok := rsu.mutation.AlreadyRead(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: readstate.FieldAlreadyRead,
		})
	}
	if value, ok := rsu.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldCreateAt,
		})
	}
	if value, ok := rsu.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldCreateAt,
		})
	}
	if value, ok := rsu.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldUpdateAt,
		})
	}
	if value, ok := rsu.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldUpdateAt,
		})
	}
	if value, ok := rsu.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldDeleteAt,
		})
	}
	if value, ok := rsu.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldDeleteAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{readstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ReadStateUpdateOne is the builder for updating a single ReadState entity.
type ReadStateUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReadStateMutation
}

// SetAppID sets the "app_id" field.
func (rsuo *ReadStateUpdateOne) SetAppID(u uuid.UUID) *ReadStateUpdateOne {
	rsuo.mutation.SetAppID(u)
	return rsuo
}

// SetUserID sets the "user_id" field.
func (rsuo *ReadStateUpdateOne) SetUserID(u uuid.UUID) *ReadStateUpdateOne {
	rsuo.mutation.SetUserID(u)
	return rsuo
}

// SetAlreadyRead sets the "already_read" field.
func (rsuo *ReadStateUpdateOne) SetAlreadyRead(b bool) *ReadStateUpdateOne {
	rsuo.mutation.SetAlreadyRead(b)
	return rsuo
}

// SetCreateAt sets the "create_at" field.
func (rsuo *ReadStateUpdateOne) SetCreateAt(u uint32) *ReadStateUpdateOne {
	rsuo.mutation.ResetCreateAt()
	rsuo.mutation.SetCreateAt(u)
	return rsuo
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (rsuo *ReadStateUpdateOne) SetNillableCreateAt(u *uint32) *ReadStateUpdateOne {
	if u != nil {
		rsuo.SetCreateAt(*u)
	}
	return rsuo
}

// AddCreateAt adds u to the "create_at" field.
func (rsuo *ReadStateUpdateOne) AddCreateAt(u uint32) *ReadStateUpdateOne {
	rsuo.mutation.AddCreateAt(u)
	return rsuo
}

// SetUpdateAt sets the "update_at" field.
func (rsuo *ReadStateUpdateOne) SetUpdateAt(u uint32) *ReadStateUpdateOne {
	rsuo.mutation.ResetUpdateAt()
	rsuo.mutation.SetUpdateAt(u)
	return rsuo
}

// AddUpdateAt adds u to the "update_at" field.
func (rsuo *ReadStateUpdateOne) AddUpdateAt(u uint32) *ReadStateUpdateOne {
	rsuo.mutation.AddUpdateAt(u)
	return rsuo
}

// SetDeleteAt sets the "delete_at" field.
func (rsuo *ReadStateUpdateOne) SetDeleteAt(u uint32) *ReadStateUpdateOne {
	rsuo.mutation.ResetDeleteAt()
	rsuo.mutation.SetDeleteAt(u)
	return rsuo
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (rsuo *ReadStateUpdateOne) SetNillableDeleteAt(u *uint32) *ReadStateUpdateOne {
	if u != nil {
		rsuo.SetDeleteAt(*u)
	}
	return rsuo
}

// AddDeleteAt adds u to the "delete_at" field.
func (rsuo *ReadStateUpdateOne) AddDeleteAt(u uint32) *ReadStateUpdateOne {
	rsuo.mutation.AddDeleteAt(u)
	return rsuo
}

// Mutation returns the ReadStateMutation object of the builder.
func (rsuo *ReadStateUpdateOne) Mutation() *ReadStateMutation {
	return rsuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rsuo *ReadStateUpdateOne) Select(field string, fields ...string) *ReadStateUpdateOne {
	rsuo.fields = append([]string{field}, fields...)
	return rsuo
}

// Save executes the query and returns the updated ReadState entity.
func (rsuo *ReadStateUpdateOne) Save(ctx context.Context) (*ReadState, error) {
	var (
		err  error
		node *ReadState
	)
	rsuo.defaults()
	if len(rsuo.hooks) == 0 {
		node, err = rsuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReadStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rsuo.mutation = mutation
			node, err = rsuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rsuo.hooks) - 1; i >= 0; i-- {
			if rsuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rsuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rsuo *ReadStateUpdateOne) SaveX(ctx context.Context) *ReadState {
	node, err := rsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rsuo *ReadStateUpdateOne) Exec(ctx context.Context) error {
	_, err := rsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsuo *ReadStateUpdateOne) ExecX(ctx context.Context) {
	if err := rsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsuo *ReadStateUpdateOne) defaults() {
	if _, ok := rsuo.mutation.UpdateAt(); !ok {
		v := readstate.UpdateDefaultUpdateAt()
		rsuo.mutation.SetUpdateAt(v)
	}
}

func (rsuo *ReadStateUpdateOne) sqlSave(ctx context.Context) (_node *ReadState, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   readstate.Table,
			Columns: readstate.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: readstate.FieldID,
			},
		},
	}
	id, ok := rsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing ReadState.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := rsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, readstate.FieldID)
		for _, f := range fields {
			if !readstate.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != readstate.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rsuo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readstate.FieldAppID,
		})
	}
	if value, ok := rsuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readstate.FieldUserID,
		})
	}
	if value, ok := rsuo.mutation.AlreadyRead(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: readstate.FieldAlreadyRead,
		})
	}
	if value, ok := rsuo.mutation.CreateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldCreateAt,
		})
	}
	if value, ok := rsuo.mutation.AddedCreateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldCreateAt,
		})
	}
	if value, ok := rsuo.mutation.UpdateAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldUpdateAt,
		})
	}
	if value, ok := rsuo.mutation.AddedUpdateAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldUpdateAt,
		})
	}
	if value, ok := rsuo.mutation.DeleteAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldDeleteAt,
		})
	}
	if value, ok := rsuo.mutation.AddedDeleteAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldDeleteAt,
		})
	}
	_node = &ReadState{config: rsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{readstate.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
