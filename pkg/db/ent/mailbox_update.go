// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notification/pkg/db/ent/mailbox"
	"github.com/NpoolPlatform/notification/pkg/db/ent/predicate"
)

// MailBoxUpdate is the builder for updating MailBox entities.
type MailBoxUpdate struct {
	config
	hooks    []Hook
	mutation *MailBoxMutation
}

// Where appends a list predicates to the MailBoxUpdate builder.
func (mbu *MailBoxUpdate) Where(ps ...predicate.MailBox) *MailBoxUpdate {
	mbu.mutation.Where(ps...)
	return mbu
}

// Mutation returns the MailBoxMutation object of the builder.
func (mbu *MailBoxUpdate) Mutation() *MailBoxMutation {
	return mbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mbu *MailBoxUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mbu.hooks) == 0 {
		affected, err = mbu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MailBoxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mbu.mutation = mutation
			affected, err = mbu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mbu.hooks) - 1; i >= 0; i-- {
			if mbu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mbu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mbu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mbu *MailBoxUpdate) SaveX(ctx context.Context) int {
	affected, err := mbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mbu *MailBoxUpdate) Exec(ctx context.Context) error {
	_, err := mbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbu *MailBoxUpdate) ExecX(ctx context.Context) {
	if err := mbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mbu *MailBoxUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mailbox.Table,
			Columns: mailbox.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mailbox.FieldID,
			},
		},
	}
	if ps := mbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mailbox.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// MailBoxUpdateOne is the builder for updating a single MailBox entity.
type MailBoxUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MailBoxMutation
}

// Mutation returns the MailBoxMutation object of the builder.
func (mbuo *MailBoxUpdateOne) Mutation() *MailBoxMutation {
	return mbuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mbuo *MailBoxUpdateOne) Select(field string, fields ...string) *MailBoxUpdateOne {
	mbuo.fields = append([]string{field}, fields...)
	return mbuo
}

// Save executes the query and returns the updated MailBox entity.
func (mbuo *MailBoxUpdateOne) Save(ctx context.Context) (*MailBox, error) {
	var (
		err  error
		node *MailBox
	)
	if len(mbuo.hooks) == 0 {
		node, err = mbuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MailBoxMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mbuo.mutation = mutation
			node, err = mbuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mbuo.hooks) - 1; i >= 0; i-- {
			if mbuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mbuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mbuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mbuo *MailBoxUpdateOne) SaveX(ctx context.Context) *MailBox {
	node, err := mbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mbuo *MailBoxUpdateOne) Exec(ctx context.Context) error {
	_, err := mbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbuo *MailBoxUpdateOne) ExecX(ctx context.Context) {
	if err := mbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mbuo *MailBoxUpdateOne) sqlSave(ctx context.Context) (_node *MailBox, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mailbox.Table,
			Columns: mailbox.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mailbox.FieldID,
			},
		},
	}
	id, ok := mbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MailBox.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := mbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mailbox.FieldID)
		for _, f := range fields {
			if !mailbox.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mailbox.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &MailBox{config: mbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mailbox.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
