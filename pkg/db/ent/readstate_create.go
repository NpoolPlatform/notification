// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/notification/pkg/db/ent/readstate"
	"github.com/google/uuid"
)

// ReadStateCreate is the builder for creating a ReadState entity.
type ReadStateCreate struct {
	config
	mutation *ReadStateMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (rsc *ReadStateCreate) SetAppID(u uuid.UUID) *ReadStateCreate {
	rsc.mutation.SetAppID(u)
	return rsc
}

// SetUserID sets the "user_id" field.
func (rsc *ReadStateCreate) SetUserID(u uuid.UUID) *ReadStateCreate {
	rsc.mutation.SetUserID(u)
	return rsc
}

// SetAlreadyRead sets the "already_read" field.
func (rsc *ReadStateCreate) SetAlreadyRead(b bool) *ReadStateCreate {
	rsc.mutation.SetAlreadyRead(b)
	return rsc
}

// SetCreateAt sets the "create_at" field.
func (rsc *ReadStateCreate) SetCreateAt(u uint32) *ReadStateCreate {
	rsc.mutation.SetCreateAt(u)
	return rsc
}

// SetNillableCreateAt sets the "create_at" field if the given value is not nil.
func (rsc *ReadStateCreate) SetNillableCreateAt(u *uint32) *ReadStateCreate {
	if u != nil {
		rsc.SetCreateAt(*u)
	}
	return rsc
}

// SetUpdateAt sets the "update_at" field.
func (rsc *ReadStateCreate) SetUpdateAt(u uint32) *ReadStateCreate {
	rsc.mutation.SetUpdateAt(u)
	return rsc
}

// SetNillableUpdateAt sets the "update_at" field if the given value is not nil.
func (rsc *ReadStateCreate) SetNillableUpdateAt(u *uint32) *ReadStateCreate {
	if u != nil {
		rsc.SetUpdateAt(*u)
	}
	return rsc
}

// SetDeleteAt sets the "delete_at" field.
func (rsc *ReadStateCreate) SetDeleteAt(u uint32) *ReadStateCreate {
	rsc.mutation.SetDeleteAt(u)
	return rsc
}

// SetNillableDeleteAt sets the "delete_at" field if the given value is not nil.
func (rsc *ReadStateCreate) SetNillableDeleteAt(u *uint32) *ReadStateCreate {
	if u != nil {
		rsc.SetDeleteAt(*u)
	}
	return rsc
}

// SetID sets the "id" field.
func (rsc *ReadStateCreate) SetID(u uuid.UUID) *ReadStateCreate {
	rsc.mutation.SetID(u)
	return rsc
}

// Mutation returns the ReadStateMutation object of the builder.
func (rsc *ReadStateCreate) Mutation() *ReadStateMutation {
	return rsc.mutation
}

// Save creates the ReadState in the database.
func (rsc *ReadStateCreate) Save(ctx context.Context) (*ReadState, error) {
	var (
		err  error
		node *ReadState
	)
	rsc.defaults()
	if len(rsc.hooks) == 0 {
		if err = rsc.check(); err != nil {
			return nil, err
		}
		node, err = rsc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ReadStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rsc.check(); err != nil {
				return nil, err
			}
			rsc.mutation = mutation
			if node, err = rsc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rsc.hooks) - 1; i >= 0; i-- {
			if rsc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rsc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rsc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rsc *ReadStateCreate) SaveX(ctx context.Context) *ReadState {
	v, err := rsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rsc *ReadStateCreate) Exec(ctx context.Context) error {
	_, err := rsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rsc *ReadStateCreate) ExecX(ctx context.Context) {
	if err := rsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rsc *ReadStateCreate) defaults() {
	if _, ok := rsc.mutation.CreateAt(); !ok {
		v := readstate.DefaultCreateAt()
		rsc.mutation.SetCreateAt(v)
	}
	if _, ok := rsc.mutation.UpdateAt(); !ok {
		v := readstate.DefaultUpdateAt()
		rsc.mutation.SetUpdateAt(v)
	}
	if _, ok := rsc.mutation.DeleteAt(); !ok {
		v := readstate.DefaultDeleteAt()
		rsc.mutation.SetDeleteAt(v)
	}
	if _, ok := rsc.mutation.ID(); !ok {
		v := readstate.DefaultID()
		rsc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rsc *ReadStateCreate) check() error {
	if _, ok := rsc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "app_id"`)}
	}
	if _, ok := rsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "user_id"`)}
	}
	if _, ok := rsc.mutation.AlreadyRead(); !ok {
		return &ValidationError{Name: "already_read", err: errors.New(`ent: missing required field "already_read"`)}
	}
	if _, ok := rsc.mutation.CreateAt(); !ok {
		return &ValidationError{Name: "create_at", err: errors.New(`ent: missing required field "create_at"`)}
	}
	if _, ok := rsc.mutation.UpdateAt(); !ok {
		return &ValidationError{Name: "update_at", err: errors.New(`ent: missing required field "update_at"`)}
	}
	if _, ok := rsc.mutation.DeleteAt(); !ok {
		return &ValidationError{Name: "delete_at", err: errors.New(`ent: missing required field "delete_at"`)}
	}
	return nil
}

func (rsc *ReadStateCreate) sqlSave(ctx context.Context) (*ReadState, error) {
	_node, _spec := rsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (rsc *ReadStateCreate) createSpec() (*ReadState, *sqlgraph.CreateSpec) {
	var (
		_node = &ReadState{config: rsc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: readstate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: readstate.FieldID,
			},
		}
	)
	_spec.OnConflict = rsc.conflict
	if id, ok := rsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rsc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readstate.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := rsc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: readstate.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := rsc.mutation.AlreadyRead(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: readstate.FieldAlreadyRead,
		})
		_node.AlreadyRead = value
	}
	if value, ok := rsc.mutation.CreateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldCreateAt,
		})
		_node.CreateAt = value
	}
	if value, ok := rsc.mutation.UpdateAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldUpdateAt,
		})
		_node.UpdateAt = value
	}
	if value, ok := rsc.mutation.DeleteAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: readstate.FieldDeleteAt,
		})
		_node.DeleteAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReadState.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReadStateUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (rsc *ReadStateCreate) OnConflict(opts ...sql.ConflictOption) *ReadStateUpsertOne {
	rsc.conflict = opts
	return &ReadStateUpsertOne{
		create: rsc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReadState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rsc *ReadStateCreate) OnConflictColumns(columns ...string) *ReadStateUpsertOne {
	rsc.conflict = append(rsc.conflict, sql.ConflictColumns(columns...))
	return &ReadStateUpsertOne{
		create: rsc,
	}
}

type (
	// ReadStateUpsertOne is the builder for "upsert"-ing
	//  one ReadState node.
	ReadStateUpsertOne struct {
		create *ReadStateCreate
	}

	// ReadStateUpsert is the "OnConflict" setter.
	ReadStateUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *ReadStateUpsert) SetAppID(v uuid.UUID) *ReadStateUpsert {
	u.Set(readstate.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ReadStateUpsert) UpdateAppID() *ReadStateUpsert {
	u.SetExcluded(readstate.FieldAppID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ReadStateUpsert) SetUserID(v uuid.UUID) *ReadStateUpsert {
	u.Set(readstate.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ReadStateUpsert) UpdateUserID() *ReadStateUpsert {
	u.SetExcluded(readstate.FieldUserID)
	return u
}

// SetAlreadyRead sets the "already_read" field.
func (u *ReadStateUpsert) SetAlreadyRead(v bool) *ReadStateUpsert {
	u.Set(readstate.FieldAlreadyRead, v)
	return u
}

// UpdateAlreadyRead sets the "already_read" field to the value that was provided on create.
func (u *ReadStateUpsert) UpdateAlreadyRead() *ReadStateUpsert {
	u.SetExcluded(readstate.FieldAlreadyRead)
	return u
}

// SetCreateAt sets the "create_at" field.
func (u *ReadStateUpsert) SetCreateAt(v uint32) *ReadStateUpsert {
	u.Set(readstate.FieldCreateAt, v)
	return u
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *ReadStateUpsert) UpdateCreateAt() *ReadStateUpsert {
	u.SetExcluded(readstate.FieldCreateAt)
	return u
}

// SetUpdateAt sets the "update_at" field.
func (u *ReadStateUpsert) SetUpdateAt(v uint32) *ReadStateUpsert {
	u.Set(readstate.FieldUpdateAt, v)
	return u
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *ReadStateUpsert) UpdateUpdateAt() *ReadStateUpsert {
	u.SetExcluded(readstate.FieldUpdateAt)
	return u
}

// SetDeleteAt sets the "delete_at" field.
func (u *ReadStateUpsert) SetDeleteAt(v uint32) *ReadStateUpsert {
	u.Set(readstate.FieldDeleteAt, v)
	return u
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *ReadStateUpsert) UpdateDeleteAt() *ReadStateUpsert {
	u.SetExcluded(readstate.FieldDeleteAt)
	return u
}

// UpdateNewValues updates the fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.ReadState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(readstate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ReadStateUpsertOne) UpdateNewValues() *ReadStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(readstate.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.ReadState.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *ReadStateUpsertOne) Ignore() *ReadStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReadStateUpsertOne) DoNothing() *ReadStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReadStateCreate.OnConflict
// documentation for more info.
func (u *ReadStateUpsertOne) Update(set func(*ReadStateUpsert)) *ReadStateUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReadStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *ReadStateUpsertOne) SetAppID(v uuid.UUID) *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ReadStateUpsertOne) UpdateAppID() *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ReadStateUpsertOne) SetUserID(v uuid.UUID) *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ReadStateUpsertOne) UpdateUserID() *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateUserID()
	})
}

// SetAlreadyRead sets the "already_read" field.
func (u *ReadStateUpsertOne) SetAlreadyRead(v bool) *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetAlreadyRead(v)
	})
}

// UpdateAlreadyRead sets the "already_read" field to the value that was provided on create.
func (u *ReadStateUpsertOne) UpdateAlreadyRead() *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateAlreadyRead()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *ReadStateUpsertOne) SetCreateAt(v uint32) *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *ReadStateUpsertOne) UpdateCreateAt() *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *ReadStateUpsertOne) SetUpdateAt(v uint32) *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *ReadStateUpsertOne) UpdateUpdateAt() *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *ReadStateUpsertOne) SetDeleteAt(v uint32) *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *ReadStateUpsertOne) UpdateDeleteAt() *ReadStateUpsertOne {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *ReadStateUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReadStateCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReadStateUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ReadStateUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ReadStateUpsertOne.ID is not supported by MySQL driver. Use ReadStateUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ReadStateUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ReadStateCreateBulk is the builder for creating many ReadState entities in bulk.
type ReadStateCreateBulk struct {
	config
	builders []*ReadStateCreate
	conflict []sql.ConflictOption
}

// Save creates the ReadState entities in the database.
func (rscb *ReadStateCreateBulk) Save(ctx context.Context) ([]*ReadState, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rscb.builders))
	nodes := make([]*ReadState, len(rscb.builders))
	mutators := make([]Mutator, len(rscb.builders))
	for i := range rscb.builders {
		func(i int, root context.Context) {
			builder := rscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReadStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rscb *ReadStateCreateBulk) SaveX(ctx context.Context) []*ReadState {
	v, err := rscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rscb *ReadStateCreateBulk) Exec(ctx context.Context) error {
	_, err := rscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rscb *ReadStateCreateBulk) ExecX(ctx context.Context) {
	if err := rscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.ReadState.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ReadStateUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
//
func (rscb *ReadStateCreateBulk) OnConflict(opts ...sql.ConflictOption) *ReadStateUpsertBulk {
	rscb.conflict = opts
	return &ReadStateUpsertBulk{
		create: rscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.ReadState.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (rscb *ReadStateCreateBulk) OnConflictColumns(columns ...string) *ReadStateUpsertBulk {
	rscb.conflict = append(rscb.conflict, sql.ConflictColumns(columns...))
	return &ReadStateUpsertBulk{
		create: rscb,
	}
}

// ReadStateUpsertBulk is the builder for "upsert"-ing
// a bulk of ReadState nodes.
type ReadStateUpsertBulk struct {
	create *ReadStateCreateBulk
}

// UpdateNewValues updates the fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.ReadState.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(readstate.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *ReadStateUpsertBulk) UpdateNewValues() *ReadStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(readstate.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.ReadState.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *ReadStateUpsertBulk) Ignore() *ReadStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ReadStateUpsertBulk) DoNothing() *ReadStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ReadStateCreateBulk.OnConflict
// documentation for more info.
func (u *ReadStateUpsertBulk) Update(set func(*ReadStateUpsert)) *ReadStateUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ReadStateUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *ReadStateUpsertBulk) SetAppID(v uuid.UUID) *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *ReadStateUpsertBulk) UpdateAppID() *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateAppID()
	})
}

// SetUserID sets the "user_id" field.
func (u *ReadStateUpsertBulk) SetUserID(v uuid.UUID) *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ReadStateUpsertBulk) UpdateUserID() *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateUserID()
	})
}

// SetAlreadyRead sets the "already_read" field.
func (u *ReadStateUpsertBulk) SetAlreadyRead(v bool) *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetAlreadyRead(v)
	})
}

// UpdateAlreadyRead sets the "already_read" field to the value that was provided on create.
func (u *ReadStateUpsertBulk) UpdateAlreadyRead() *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateAlreadyRead()
	})
}

// SetCreateAt sets the "create_at" field.
func (u *ReadStateUpsertBulk) SetCreateAt(v uint32) *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetCreateAt(v)
	})
}

// UpdateCreateAt sets the "create_at" field to the value that was provided on create.
func (u *ReadStateUpsertBulk) UpdateCreateAt() *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateCreateAt()
	})
}

// SetUpdateAt sets the "update_at" field.
func (u *ReadStateUpsertBulk) SetUpdateAt(v uint32) *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetUpdateAt(v)
	})
}

// UpdateUpdateAt sets the "update_at" field to the value that was provided on create.
func (u *ReadStateUpsertBulk) UpdateUpdateAt() *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateUpdateAt()
	})
}

// SetDeleteAt sets the "delete_at" field.
func (u *ReadStateUpsertBulk) SetDeleteAt(v uint32) *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.SetDeleteAt(v)
	})
}

// UpdateDeleteAt sets the "delete_at" field to the value that was provided on create.
func (u *ReadStateUpsertBulk) UpdateDeleteAt() *ReadStateUpsertBulk {
	return u.Update(func(s *ReadStateUpsert) {
		s.UpdateDeleteAt()
	})
}

// Exec executes the query.
func (u *ReadStateUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ReadStateCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ReadStateCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ReadStateUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
